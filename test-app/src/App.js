import React, { useState, useCallback, useRef, useEffect } from "react";
import { Lock, Unlock, CheckCircle, XCircle, Gift, Info } from "lucide-react";

// „Çπ„Ç±„Ç∏„É•„Éº„É´„Éá„Éº„Çø„Å®Ë¨éËß£„Åç„ÇíÂÆöÁæ©„Åô„ÇãJSONÊßãÈÄ†
// plan: Áü≠„ÅÑ„Çø„Ç§„Éà„É´, detail: Ë©≥„Åó„ÅÑË™¨Êòé (WIP„ÅßËøΩÂä†), riddle: Ë¨é, answer: Á≠î„Åà, hint: „Éí„É≥„Éà
const scheduleData = {
  Day1: [
    {
      time: "0:00 ~ ",
      plan: "Happy Birthday „Åª„ÅÆ„ÅãÔºÅÔºÅÔºÅ",
      detail: "„Ç±„Éº„Ç≠„ÇíÈ£ü„Åπ„Åü„Çä„ÄÅ„Éó„É¨„Çº„É≥„Éà„ÇíÊ∏°„Åó„Åü„Çä„Åô„Çã„ÇàÔºÅ",
      riddle: "„Åü",
      answer: "Ë®òÊÜ∂",
      hint: "„Éí„É≥„ÉàÔºö„Äå„Åü„Äç„ÅåÊâãÂâç„Å´„ÅÇ„Çã„Å™„Çâ„Éª„Éª„ÉªÔºü",
      image: "riddle4.png",
    },
    {
      time: "12:00 ~ ",
      plan: "ÂÆ∂„ÇíÂá∫„Çã",
      detail: "12ÊôÇ„Åè„Çâ„ÅÑ„Å´ÂÆ∂„ÇíÂá∫„Çã„ÇàÔºÅÊ¨°„ÅÆÁõÆÁöÑÂú∞„Å´Âêë„Åã„Å£„Å¶„É¨„ÉÉ„ÉÑ„Ç¥„ÉºÔºÅ",
      riddle: "„ÅäËä±Ë¶ã",
      answer: "„Éí„É´",
      hint: "„Éí„É≥„ÉàÔºöÊï∞Â≠ó„ÅØÊº¢Â≠ó„ÅÆ‰Ωï„Åã„ÇíË°®„Åó„Å¶„ÅÑ„Çã„Çà„ÄÇ",
      image: "riddle1.png",
    },
    {
      time: "18:00 ~ ",
      plan: "‰∏â‰∫ï„Ç¨„Éº„Éá„É≥„Éõ„ÉÜ„É´Ë±äÊ¥≤„Å´„ÉÅ„Çß„ÉÉ„ÇØ„Ç§„É≥",
      detail: "WIP",
      riddle: "Ë§áÈõë„Å™ÊöóÂè∑",
      answer: "CAT",
      hint: "„Éí„É≥„ÉàÔºö‰∏ÄË¶ãË§áÈõë„Åù„ÅÜ„Å™Âõ≥ÂΩ¢„Å†„Åë„Å©„ÄÅ„Çà„ÅèË¶ã„Çã„Å®‰Ωï„Åã„ÅåÂêà„Çè„Åï„Å£„Å¶„Çã„Éª„Éª„ÉªÔºÅ",
      image: "riddle2.png",
    },
    {
      time: "19:00 ~ ",
      plan: "36Èöé„ÅÆ„É¨„Çπ„Éà„É©„É≥„Åß„Éá„Ç£„Éä„ÉºÔºÅ",
      detail:
        "‰∏â‰∫ï„Ç¨„Éº„Éá„É≥„Éõ„ÉÜ„É´„ÅÆ36Èöé„Å´„ÅÇ„Çã„É¨„Çπ„Éà„É©„É≥„Åß„Éá„Ç£„Éä„ÉºÔºÅ„Ç≥„Éº„Çπ„Å†„Åã„Çâ„ÄÅ„ÅäËÖπ„ÇíÁ©∫„Åã„Åõ„Å¶„Åä„Åì„ÅÜÔºÅ",
      riddle: "Á¥ô„Å®„Ç´„É°",
      answer: "„Éè„Éã„Éº",
      hint: "„Éí„É≥„ÉàÔºöÊï∞Â≠ó„Çí‰ªñ„ÅÆÊñáÂ≠ó„ÅßË°®„Åó„Å¶„Åø„Çà„ÅÜÔºÅ",
      image: "riddle3.png",
    },
    {
      time: "21:00 ~ ",
      plan: "Â§úÊôØ„ÇíË¶ã„Å™„Åå„Çâ„ÅäÈÖí„ÇíÂóú„ÇÇ„ÅÜÔºÅ",
      detail: "WIP",
      riddle: "Ê≠£ÊñπÂΩ¢",
      answer: "„Çπ„ÇØ„Ç®„Ç¢",
      hint: "„Éí„É≥„ÉàÔºö4ÊñáÂ≠ó„ÅÆ„Ç´„Çø„Ç´„Éä„Å†„ÇàÔºÅ",
      image: "riddle9.png",
    },
  ],
  Day2: [
    {
      time: "~ 9:30",
      plan: "„Éõ„ÉÜ„É´„ÅßÊúùÈ£ü„ÇíÈ£ü„Åπ„Çã„ÇàÔºÅ",
      detail: "10ÊôÇÂçä„Åæ„Åß„Å†„Åã„Çâ„ÄÅÈÅÖ„Çå„Å™„ÅÑ„Çà„ÅÜ„Å´ÔºÅÔºÅ",
      riddle: "Êó•Êú¨",
      answer: "ÂÜíÈô∫",
      hint: "„Éí„É≥„ÉàÔºöÁ∞°Âçò„Å†„Åã„ÇâÁÑ°„ÅóÔºÅ",
      image: "riddle6.png",
    },
    {
      time: "~ 11:00",
      plan: "„ÉÅ„Çß„ÉÉ„ÇØ„Ç¢„Ç¶„Éà„Åó„Çà„ÅÜÔºÅ",
      detail: "11ÊôÇ„Åæ„Åß„Å´„ÉÅ„Çß„ÉÉ„ÇØ„Ç¢„Ç¶„Éà„Å†„Åã„Çâ„ÄÅÈÅÖ„Çå„Å™„ÅÑ„Çà„ÅÜ„Å´ÔºÅÔºÅÔºÅÔºÅ",
      riddle: "„Éà„É©„É≥„Éó",
      answer: "„ÇØ„ÉÉ„Ç≠„Éº",
      hint: "„Çà„ÅèË¶ã„Çã„Å®„ÄÅÂ∞è„Åï„ÅÑ„Ç´„Éº„Éâ„Åå„ÅÇ„Çã„Å≠„ÄÇ",
      image: "riddle7.png",
    },
    {
      time: "13:00 ~ 13:30",
      plan: "„ÉÅ„Éº„É†„É©„Éú„Å´Ë°å„Åè„ÇàÔºÅÔºÅ",
      detail:
        "Ë°å„Å£„Åü„Åì„Å®ÁÑ°„ÅÑ„Å£„Å¶Ë®Ä„Å£„Å¶„Åü„Çà„Å≠ÔºüÔºü‰ø∫„ÇÇË°å„Å£„Å¶„Åø„Åü„Åã„Å£„Åü„Åã„ÇâÊ•Ω„Åó„ÅøÔºÅÔºÅ",
      riddle: "1„Å§„ÅÆ„É´„Éº„Éó„ÄÅ„Å§„Åæ„ÇäÂßãÁÇπ„Å®ÁµÇÁÇπ„ÅåÂêå„Åò„Å´„Å™„Çã„Çà„ÅÜ„Å´„Åó„Çà„ÅÜÔºÅ",
      answer: "CHAIN",
      hint: "„Éí„É≥„ÉàÔºö„Åì„ÅÆ„Éû„Çπ„ÅÆ‰∏≠„Åß‰Ωú„Çå„Çã„Ç¢„É´„Éï„Ç°„Éô„ÉÉ„Éà„ÅØÈôê„Çâ„Çå„Å¶„ÅÑ„Çã„Çà„ÄÇ",
      image: "riddle8.png",
    },
    {
      time: "16:00 ~ ",
      plan: "„Ç™„É™„Ç∏„Éä„É´„ÉÅ„Éß„Ç≥„Éê„Éä„Éä„ÇíÈ£ü„Åπ„Å´Ë°å„Åì„ÅÜÔºÅ",
      detail: "„Åª„ÅÆ„Åã„ÅåÊïô„Åà„Å¶„Åè„Çå„Åü„ÇÑ„Å§„ÄÅÈ£ü„Åπ„Åü„Åè„Å¶‰ªïÊñπ„Å™„Åã„Å£„Åü„ÄÇ",
      riddle: "ABC",
      answer: "CUBE",
      hint: "„Éí„É≥„ÉàÔºöA->B->C „ÅØ„Ç¢„É´„Éï„Ç°„Éô„ÉÉ„Éà„ÅÆÈ†Ü„ÄÅA->I->U „ÅØÔºü",
      image: "riddle5.png",
    },
    {
      time: "16:30 ~ ",
      plan: "ÂéüÂÆøËøëËæ∫„ÅßËá™Áî±ÊôÇÈñìÔºÅ",
      detail:
        "„Å°„ÅÑ„Åã„Çè„É©„É≥„Éâ„ÄÅ„Ç≤„Éº„É†„Çª„É≥„Çø„Éº„ÄÅ„Ç´„Éï„Çß„ÄÅ„Å™„Å©„Å™„Å©ÔºÅÔºÅÂéüÂÆø„ÅÆ„Å°„ÅÑ„Åã„Çè„É©„É≥„Éâ„Åå„É™„Éã„É•„Éº„Ç¢„É´„Åó„Åü„Çà„ÄÇ„Ç≤„Éº„É†„Çª„É≥„Çø„Éº„Åß„ÅØËâØ„ÅÑ„Åì„Å®„Åå„ÅÇ„Çã„Åã„ÇÇÔºü",
      riddle: "„ÄåÔºü„Äç„Å´ÂÖ•„ÇãË®ÄËëâ„ÅØÔºü",
      answer: "„Çø„Ç§„Éû„Éº",
      hint: "„Éí„É≥„ÉàÔºöÁî∑„ÅÆ‰∫∫„Å´Ê≥®ÁõÆÔºÅ",
      image: "riddle10.png",
    },
  ],
};

// „Ç¢„Ç§„Ç≥„É≥„ÅÆÊ®ôÊ∫ñ„Çµ„Ç§„Ç∫„ÇíÂÆöÁæ© (Tailwind CSS „ÅÆ„ÇØ„É©„Çπ„Çí‰ΩøÁî®)
const ICON_SIZE = "w-6 h-6";
const SMALL_ICON_SIZE = "w-5 h-5";

// Ë©≥Á¥∞‰∫àÂÆö„É¢„Éº„ÉÄ„É´„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
const DetailModal = ({ isOpen, onClose, scheduleItem }) => {
  if (!isOpen) return null;

  return (
    <div
      className="fixed inset-0 bg-black bg-opacity-70 z-50 flex items-center justify-center p-4 transition-opacity duration-300"
      onClick={onClose}
    >
      <div
        className="bg-white p-6 rounded-2xl shadow-2xl w-full max-w-lg transform transition-all duration-300 scale-100 border-4 border-pink-400"
        onClick={(e) => e.stopPropagation()}
      >
        <h3 className="text-2xl font-black mb-4 text-pink-600 flex items-center border-b pb-2">
          {/* „Åì„Åì„Çí ICON_SIZE „Å´Âõ∫ÂÆö */}
          <Gift className={`${ICON_SIZE} mr-2 text-pink-500 flex-shrink-0`} />
          {scheduleItem.plan}
        </h3>
        <p className="text-sm text-gray-500 mb-4">ÊôÇÈñì: {scheduleItem.time}</p>

        <p className="text-gray-700 font-medium whitespace-pre-wrap leading-relaxed">
          {scheduleItem.detail}
        </p>
        <button
          onClick={onClose}
          className="w-full mt-6 bg-pink-500 text-white font-bold py-3 rounded-xl hover:bg-pink-600 transition-all duration-200 shadow-lg"
        >
          Èñâ„Åò„Çã
        </button>
      </div>
    </div>
  );
};

// Ë¨éËß£„Åç„É¢„Éº„ÉÄ„É´„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
const RiddleModal = ({
  isOpen,
  onClose,
  scheduleItem,
  onSolveAndOpenDetail,
}) => {
  const [answerInput, setAnswerInput] = useState("");
  const [message, setMessage] = useState("");
  const [isError, setIsError] = useState(false);

  // „É¢„Éº„ÉÄ„É´„ÅåÈñã„ÅÑ„Åü„Å®„Åç„Å´„Çπ„ÉÜ„Éº„Éà„Çí„É™„Çª„ÉÉ„Éà
  useEffect(() => {
    if (isOpen) {
      setAnswerInput("");
      setMessage("");
      setIsError(false);
    }
  }, [isOpen]);

  // Á≠î„Åà„ÅÆÊ§úË®º„É≠„Ç∏„ÉÉ„ÇØ
  const checkAnswer = () => {
    // ÂÖ®Ëßí„ÉªÂçäËßí„ÄÅÂ§ßÊñáÂ≠ó„ÉªÂ∞èÊñáÂ≠ó„ÄÅ„Çπ„Éö„Éº„Çπ„ÇíÁÑ°Ë¶ñ„Åó„Å¶ÊØîËºÉ
    const normalizedInput = answerInput.toLowerCase().replace(/\s/g, "").trim();
    const normalizedCorrectAnswer = scheduleItem.answer
      .toLowerCase()
      .replace(/\s/g, "")
      .trim();

    if (normalizedInput === normalizedCorrectAnswer) {
      setMessage("üéäÊ≠£Ëß£ÔºÅÔºÅÔºÅ„Åï„Åô„Åå„Åª„ÅÆ„ÅãÔºÅÔºÅÔºÅÂ§©ÊâçÔºÅÔºÅÔºÅüéä");
      setIsError(false);

      // ÊàêÂäüÊôÇ„ÅØË¶™„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÇíÂëº„Å≥Âá∫„Åó„ÄÅË¨éËß£„Åç„É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„ÄÅË©≥Á¥∞„É¢„Éº„ÉÄ„É´„ÇíÈñã„Åã„Åõ„Çã
      setTimeout(() => {
        onSolveAndOpenDetail();
      }, 3000);
    } else {
      setMessage("ÊÆãÂøµÔºÅ„Éí„É≥„Éà„Çí„Çà„ÅèË¶ã„Å¶ËÄÉ„Åà„Å¶„Åø„Å¶„Å≠ÔºÅ");
      setIsError(true);
      setTimeout(() => {
        setMessage("");
      }, 3000);
    }
  };

  if (!isOpen) return null;

  return (
    <div
      className="fixed inset-0 bg-black bg-opacity-70 z-50 flex items-center justify-center p-4 transition-opacity duration-300"
      onClick={onClose}
    >
      <div
        className="bg-white p-6 rounded-2xl shadow-2xl w-full max-w-sm transform transition-all duration-300 scale-100 border-4 border-pink-400"
        onClick={(e) => e.stopPropagation()}
      >
        <h3 className="text-xl font-bold mb-4 text-pink-600 flex items-center">
          <Lock className={`${ICON_SIZE} mr-2 flex-shrink-0`} />{" "}
          Ë¨éËß£„Åç„ÉÅ„É£„É¨„É≥„Ç∏ÔºÅ
        </h3>

        {scheduleItem.image && (
          <div className="mb-4 rounded-xl overflow-hidden shadow-md">
            <img
              src={`/${scheduleItem.image}`}
              alt="Ë¨éËß£„Åç„ÅÆ„Éí„É≥„ÉàÁîªÂÉè"
              className="w-full h-auto object-cover border-2 border-pink-100"
              onError={(e) => {
                e.target.onerror = null;
                e.target.src =
                  "https://placehold.co/400x200/F472B6/ffffff?text=Image+Not+Found"; // „Ç®„É©„ÉºÊôÇ„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
              }}
            />
          </div>
        )}

        <p className="mb-4 text-gray-700 font-medium whitespace-pre-wrap">
          {scheduleItem.riddle}
        </p>

        {/* „Éí„É≥„ÉàË°®Á§∫„Ç®„É™„Ç¢ */}
        <details className="mb-4 text-sm text-gray-500 cursor-pointer">
          <summary className="font-semibold text-pink-500 hover:text-pink-600 transition-colors">
            „Éí„É≥„Éà„ÇíË¶ã„Çã
          </summary>
          <p className="mt-2 p-2 bg-pink-50 border-l-4 border-pink-300 rounded">
            {scheduleItem.hint}
          </p>
        </details>

        <input
          type="text"
          value={answerInput}
          onChange={(e) => setAnswerInput(e.target.value)}
          placeholder="„Åì„Åì„Å´Á≠î„Åà„ÇíÂÖ•Âäõ„Åó„Å¶„Å≠"
          className="w-full p-3 mb-4 border-2 border-pink-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 transition-shadow"
          onKeyDown={(e) => e.key === "Enter" && checkAnswer()}
        />

        <button
          onClick={checkAnswer}
          className="w-full bg-pink-500 text-white font-bold py-3 rounded-xl hover:bg-pink-600 transition-all duration-200 shadow-lg hover:shadow-xl active:scale-98 mb-3"
        >
          Á≠î„Åà„ÇíÈÄÅ‰ø°ÔºÅ
        </button>

        {message && (
          <div
            className={`p-3 mt-3 rounded-xl flex items-center ${
              isError
                ? "bg-red-100 text-red-700"
                : "bg-green-100 text-green-700"
            }`}
          >
            {isError ? (
              <XCircle className={`${SMALL_ICON_SIZE} mr-2 flex-shrink-0`} />
            ) : (
              <CheckCircle
                className={`${SMALL_ICON_SIZE} mr-2 flex-shrink-0`}
              />
            )}
            <span className="font-semibold">{message}</span>
          </div>
        )}

        <button
          onClick={onClose}
          className="w-full text-sm text-gray-500 mt-4 hover:text-gray-700 transition-colors"
        >
          Èñâ„Åò„Çã
        </button>
      </div>
    </div>
  );
};

// „Çπ„Ç±„Ç∏„É•„Éº„É´„ÉÜ„Éº„Éñ„É´Ë°å„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
const ScheduleRow = ({
  item,
  isRevealed,
  onOpenRiddle,
  onOpenDetail,
  onSolveDirectly,
}) => {
  const pressTimeout = useRef(null); // Èï∑Êäº„ÅóÁî®„ÅÆ„Çø„Ç§„Éû„Éº„Çí‰øùÊåÅ

  // Èï∑Êäº„ÅóÈñãÂßã (2000msÂæå„Å´Áõ¥Êé•„Ç¢„É≥„É≠„ÉÉ„ÇØ)
  const handlePressStart = () => {
    // „Åô„Åß„Å´„Ç¢„É≥„É≠„ÉÉ„ÇØ„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØÂãï‰Ωú„Åï„Åõ„Å™„ÅÑ
    if (isRevealed) return;

    // 2000ms (2Áßí) „Å´Ë®≠ÂÆö
    pressTimeout.current = setTimeout(() => {
      onSolveDirectly(item); // Áõ¥Êé•„Ç¢„É≥„É≠„ÉÉ„ÇØ (Ë¨é„ÇíËß£„ÅÑ„Åü„Åì„Å®„Å´„Åô„Çã)
    }, 2000);
  };

  // Èï∑Êäº„ÅóÁµÇ‰∫Ü/„Ç≠„É£„É≥„Çª„É´
  const handlePressEnd = () => {
    clearTimeout(pressTimeout.current);
    // Èï∑Êäº„Åó„ÇíÂÆå‰∫Ü„Åó„Åü„Å®„Åç„ÅÆ„Åø onSolveDirectly „ÅåÂÆüË°å„Åï„Çå„Çã
  };

  // ÈÄöÂ∏∏„ÅÆË°å„ÇØ„É™„ÉÉ„ÇØ (Ë¨éËß£„Åç„É¢„Éº„ÉÄ„É´„Åæ„Åü„ÅØË©≥Á¥∞„É¢„Éº„ÉÄ„É´„ÇíÈñã„Åè)
  const handleRowClick = (e) => {
    // Èï∑Êäº„Åó‰∏≠„ÅØ„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà„ÇÇÁô∫Áîü„Åô„Çã„Åü„ÇÅ„ÄÅÈï∑Êäº„Åó„Åß„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç„Åô„Çã„Åü„ÇÅ„Å´ e.detail „Çí‰ΩøÁî®
    // PC„Åß„ÅØ„ÇØ„É™„ÉÉ„ÇØÂõûÊï∞„ÄÅ„Çπ„Éû„Éõ„Åß„ÅØÈÄöÂ∏∏„Çø„ÉÉ„ÉóÔºàe.detail=1Ôºâ„ÇíÂà§Âà•„Åô„Çã
    if (e.detail === 1) {
      if (isRevealed) {
        onOpenDetail(item); // Ë©≥Á¥∞„É¢„Éº„ÉÄ„É´„ÇíÈñã„Åè
      } else {
        onOpenRiddle(item); // Ë¨éËß£„Åç„É¢„Éº„ÉÄ„É´„ÇíÈñã„Åè
      }
    }
  };

  return (
    <div className="flex border-b border-pink-200 last:border-b-0">
      {/* ÊôÇÈñìÂàó (Èï∑Êäº„Åó„Åß„Çπ„Ç≠„ÉÉ„Éó) */}
      <div
        className={`w-1/3 p-3 font-semibold flex flex-col items-center justify-center border-r border-pink-200 relative select-none transition-colors ${
          isRevealed
            ? "bg-pink-100 text-pink-700"
            : "bg-pink-100 text-pink-700 cursor-pointer hover:bg-pink-200" // „É≠„ÉÉ„ÇØÊôÇ„ÅØÂ∞ë„ÅóÊøÉ„ÅÑËâ≤„Åß„Çπ„Ç≠„ÉÉ„ÉóÂèØËÉΩ„Çí„Ç¢„Éî„Éº„É´
        }`}
        // PC/Touch„Ç§„Éô„É≥„Éà„ÇíË®≠ÂÆö
        onMouseDown={handlePressStart}
        onMouseUp={handlePressEnd}
        onTouchStart={handlePressStart}
        onTouchEnd={handlePressEnd}
        onMouseLeave={handlePressEnd} // „Éû„Ç¶„Çπ„Åå„Ç®„É™„Ç¢„ÇíÈõ¢„Çå„ÅüÂ†¥Âêà„ÇÇ„É™„Çª„ÉÉ„Éà
      >
        <span className="text-lg">{item.time}</span>
        {!isRevealed && (
          <span className="text-[10px] text-red-600 font-bold mt-1 animate-pulse">
            Èï∑Êäº„Åó„Åß„Çπ„Ç≠„ÉÉ„ÉóÔºÅ
          </span>
        )}
      </div>

      {/* ‰∫àÂÆöÂÜÖÂÆπÂàó (Ë¨éËß£„Åç„Ç®„É™„Ç¢/Ë©≥Á¥∞Ë°®Á§∫„Ç®„É™„Ç¢) */}
      {/* „Åì„Åì„Åß onClick „ÇíÂÆöÁæ©„Åô„Çã„Åì„Å®„Åß„ÄÅÊôÇÈñìÂàó„Åß„ÅÆ„ÇØ„É™„ÉÉ„ÇØ„Å®Á´∂Âêà„Åó„Å™„ÅÑ„Çà„ÅÜ„Å´„Åô„Çã */}
      <div
        className={`w-2/3 p-3 flex items-center transition-all duration-300 ease-in-out cursor-pointer ${
          isRevealed
            ? "bg-white hover:bg-pink-50" // „Ç¢„É≥„É≠„ÉÉ„ÇØÊ∏à„Åø
            : "bg-pink-300 hover:bg-pink-400 active:bg-pink-500" // „É≠„ÉÉ„ÇØ‰∏≠
        }`}
        onClick={handleRowClick}
      >
        {isRevealed ? (
          // Á≠î„Åà„ÅåÂàÜ„Åã„Å£„Å¶„ÅÑ„ÇãÂ†¥Âêà („Çø„Ç§„Éà„É´Ë°®Á§∫ + Ë©≥Á¥∞„É¢„Éº„ÉÄ„É´„ÇíÈñã„Åè)
          <div className="text-gray-800 font-medium flex items-center">
            <Unlock
              className={`${SMALL_ICON_SIZE} mr-2 text-green-600 flex-shrink-0`}
            />
            <span className="font-extrabold text-md text-pink-800">
              {item.plan}
            </span>
            <span className="text-xs text-gray-500 ml-2">(„Çø„ÉÉ„Éó„ÅßË©≥Á¥∞)</span>
          </div>
        ) : (
          // Ë¨éËß£„Åç„ÅåÂøÖË¶Å„Å™Â†¥Âêà
          <div className="text-white font-bold text-md flex items-center justify-center w-full py-2">
            <Lock className={`${ICON_SIZE} mr-2 flex-shrink-0`} />
            „Çø„ÉÉ„Éó„Åó„Å¶Ë¨éËß£„Åç„Å∏ÔºÅ
          </div>
        )}
      </div>
    </div>
  );
};

// „É°„Ç§„É≥„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
export default function App() {
  // State for the selected day ('Day1' or 'Day2')
  const [selectedDay, setSelectedDay] = useState("Day1");

  // State to track which plans have been revealed (DayN: [index, ...])
  const [revealedPlans, setRevealedPlans] = useState({
    Day1: [],
    Day2: [],
  });

  // Modal states
  const [isRiddleModalOpen, setIsRiddleModalOpen] = useState(false);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);

  // Riddle/Detail Modal„Åß‰ΩøÁî®„Åô„Çã„ÄÅÁèæÂú®ÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Çã„Ç¢„Ç§„ÉÜ„É†
  const [currentRiddleItem, setCurrentRiddleItem] = useState(null); // { day: 'Day1', index: 0, item: {...} }

  // Ë¨éËß£„Åç„É¢„Éº„ÉÄ„É´„ÇíÈñã„ÅèÂá¶ÁêÜ
  const handleOpenRiddle = (item) => {
    // ÁèæÂú®ÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„ÇãDay„Å®Index„ÇíË®≠ÂÆö
    const index = scheduleData[selectedDay].findIndex(
      (i) => i.time === item.time && i.plan === item.plan
    );
    setCurrentRiddleItem({ day: selectedDay, index: index, item: item });
    setIsRiddleModalOpen(true);
  };

  // Ë©≥Á¥∞„É¢„Éº„ÉÄ„É´„ÇíÈñã„ÅèÂá¶ÁêÜ („Ç¢„É≥„É≠„ÉÉ„ÇØÊ∏à„ÅøË°å„ÇØ„É™„ÉÉ„ÇØÁî®)
  const handleOpenDetail = (item) => {
    setCurrentRiddleItem({ item: item });
    setIsDetailModalOpen(true);
  };

  // Ë¨éËß£„Åç„ÅåËß£„Åë„ÅüÊôÇ„ÅÆÂá¶ÁêÜ (RiddleModal„Åã„ÇâÂëº„Å∞„Çå„Çã)
  const handleSolveAndOpenDetail = useCallback(() => {
    if (currentRiddleItem) {
      // 1. „Ç¢„É≥„É≠„ÉÉ„ÇØÁä∂ÊÖã„ÇíÊõ¥Êñ∞
      setRevealedPlans((prev) => ({
        ...prev,
        [currentRiddleItem.day]: [
          ...prev[currentRiddleItem.day],
          currentRiddleItem.index,
        ],
      }));

      // 2. Ë¨éËß£„Åç„É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
      setIsRiddleModalOpen(false);

      // 3. Ë©≥Á¥∞„É¢„Éº„ÉÄ„É´„ÇíÈñã„Åè
      setIsDetailModalOpen(true);
    }
  }, [currentRiddleItem]);

  // Èï∑Êäº„Åó„ÅßÁõ¥Êé•„Ç¢„É≥„É≠„ÉÉ„ÇØ„Åô„ÇãÂá¶ÁêÜ (Ëá™Âãï„ÅßË©≥Á¥∞„É¢„Éº„ÉÄ„É´„ÇíÈñã„Åã„Å™„ÅÑ)
  const handleSolveDirectly = useCallback(
    (itemToSolve) => {
      const index = scheduleData[selectedDay].findIndex(
        (i) => i.time === itemToSolve.time && i.plan === itemToSolve.plan
      );

      if (index !== -1 && !revealedPlans[selectedDay].includes(index)) {
        // 1. „Ç¢„É≥„É≠„ÉÉ„ÇØÁä∂ÊÖã„ÇíÊõ¥Êñ∞
        setRevealedPlans((prev) => ({
          ...prev,
          [selectedDay]: [...prev[selectedDay], index],
        }));

        // 2. Ë©≥Á¥∞„É¢„Éº„ÉÄ„É´„ÅØÈñã„Åã„Å™„ÅÑÔºà„É¶„Éº„Ç∂„Éº„Åå„Çø„ÉÉ„Éó„Åô„Çã„ÅÆ„ÇíÂæÖ„Å§Ôºâ
      }
    },
    [selectedDay, revealedPlans]
  );

  const schedule = scheduleData[selectedDay];

  // Day„Åî„Å®„ÅÆÊ¶ÇË¶ÅÊÉÖÂ†±
  const daySummaries = {
    Day1: "1Êó•ÁõÆ„ÅØ„ÇÜ„Å£„Åü„Çä„ÄÅÂ§ß‰∫∫„Å™Èõ∞Âõ≤Ê∞óÔºÅ„Å°„Çá„Å£„Å®„Ç™„Ç∑„É£„É¨„Å™„Å®„Åì„Çç„Å´Ë°å„Åè„Åã„Çâ„ÄÅÊúçË£Ö„ÅØ„Ç´„Ç∏„É•„Ç¢„É´„Åô„Åé„Å™„ÅÑ„Çà„ÅÜ„Å´Ê≥®ÊÑèÔºÅ",
    Day2: "2Êó•ÁõÆ„ÅØËâ≤„Çì„Å™„Å®„Åì„Çç„Å´„ÅäÂá∫„Åã„ÅëÔºÅÂá∫Êù•„Çã„Å†„ÅëÊ≠©„Åç„ÇÑ„Åô„ÅÑÈù¥„ÇíÂ±•„ÅÑ„Å¶„ÄÅÁü≠„ÅÑ„Çπ„Ç´„Éº„Éà„ÅØÈÅø„Åë„ÅüÊñπ„ÅåËâØ„ÅÑ„ÇàÔºÅ",
  };

  return (
    <div className="min-h-screen bg-pink-50 font-sans p-4 flex flex-col items-center">
      <script src="https://cdn.tailwindcss.com"></script>
      <link
        href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;900&display=swap"
        rel="stylesheet"
      />

      {/* ‚òÖ „Éá„Ç≥„É¨„Éº„Ç∑„Éß„É≥Áî®„Ç´„Çπ„Çø„É†„Çπ„Çø„Ç§„É´ */}
      <style>{`
        body { font-family: 'Inter', sans-serif; }
        .schedule-container {
            width: 100%;
            max-width: 600px;
        }
        .animate-sparkle {
            animation: sparkle 1.5s ease-in-out infinite alternate;
        }
        @keyframes sparkle {
            0% { transform: scale(1); opacity: 0.8; }
            100% { transform: scale(1.05); opacity: 1; }
        }
      `}</style>

      <meta name="robots" content="noindex" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />

      {/* „Éò„ÉÉ„ÉÄ„Éº */}
      <header className="w-full max-w-md text-center py-6">
        <h1 className="text-3xl font-black mb-1 text-transparent bg-clip-text bg-gradient-to-r from-pink-500 to-red-500 animate-sparkle">
          üíñ Happy Birthday! üíñ
        </h1>
        <p className="text-lg text-gray-700 font-bold mt-4">
          2Êó•Èñì„ÅÆ„Çπ„Ç±„Ç∏„É•„Éº„É´„ÇíÁü•„Çä„Åü„ÅÑÔºüÔºü
          <br />
          Ë¨é„ÅåËß£„Åë„Åü„ÇâÊïô„Åà„Å¶„ÅÇ„Åí„ÇãÔºÅ
        </p>
      </header>

      {/* „Éá„Ç§Âàá„ÇäÊõø„Åà„Éú„Çø„É≥ */}
      <div className="w-full max-w-sm flex justify-center space-x-4 mb-6 p-1 bg-white rounded-xl shadow-xl">
        <button
          onClick={() => setSelectedDay("Day1")}
          className={`px-6 py-3 rounded-xl font-bold transition-all duration-300 text-lg w-1/2 ${
            selectedDay === "Day1"
              ? "bg-gradient-to-r from-pink-500 to-red-500 text-white shadow-lg transform scale-105"
              : "bg-white text-pink-500 hover:bg-pink-100"
          }`}
        >
          Day 1
        </button>
        <button
          onClick={() => setSelectedDay("Day2")}
          className={`px-6 py-3 rounded-xl font-bold transition-all duration-300 text-lg w-1/2 ${
            selectedDay === "Day2"
              ? "bg-gradient-to-r from-pink-500 to-red-500 text-white shadow-lg transform scale-105"
              : "bg-white text-pink-500 hover:bg-pink-100"
          }`}
        >
          Day 2
        </button>
      </div>

      {/* Ê≥®ÊÑè‰∫ãÈ†Ö/„Åñ„Å£„Åè„ÇäÊÉÖÂ†±„Ç®„É™„Ç¢ (bg-white„ÅØÊÆã„Åó„Å§„Å§„ÄÅÁ∏Å„ÇíÂâäÈô§) */}
      <div className="w-full max-w-md bg-white p-4 mb-6 rounded-2xl shadow-inner border border-pink-100">
        <h2 className="text-xl font-extrabold text-pink-700 flex items-center mb-2">
          <Info className="w-5 h-5 mr-2 flex-shrink-0 text-pink-500" />
          {selectedDay} „ÅÆ Ê¶ÇË¶Å„Å®Ê≥®ÊÑèÁÇπÔºÅ
        </h2>
        <p className="text-sm text-gray-600 mt-3 whitespace-pre-wrap">
          {daySummaries[selectedDay]}
        </p>
        <p className="text-xs text-gray-500 mt-3 font-medium border-t pt-4">
          üí° „ÉÜ„Çπ„Éà„ÉÜ„Çπ„Éà„ÉÜ„Çπ„Éà„ÉÜ„Çπ„Éà„ÉÜ„Çπ„Éà„ÉÜ„Çπ„Éà
        </p>
      </div>

      {/* „Çπ„Ç±„Ç∏„É•„Éº„É´Ë°®Á§∫„Ç®„É™„Ç¢ */}
      <main className="schedule-container bg-white rounded-3xl shadow-2xl overflow-hidden border-4 border-pink-300">
        {/* „ÉÜ„Éº„Éñ„É´„Éò„ÉÉ„ÉÄ„Éº */}
        <div className="flex bg-gradient-to-r from-pink-600 to-red-500 text-white font-extrabold text-lg">
          <div className="w-1/3 p-4 text-center">ÊôÇÈñì</div>
          <div className="w-2/3 p-4 text-center border-l border-pink-400">
            „Éâ„Ç≠„Éâ„Ç≠‰∫àÂÆöÂÜÖÂÆπ
          </div>
        </div>

        {/* „Çπ„Ç±„Ç∏„É•„Éº„É´„É™„Çπ„Éà */}
        <div className="divide-y divide-pink-200">
          {schedule.map((item, index) => (
            <ScheduleRow
              key={index}
              item={item}
              isRevealed={revealedPlans[selectedDay].includes(index)}
              onOpenRiddle={() => handleOpenRiddle(item)} // „É≠„ÉÉ„ÇØÊôÇ
              onOpenDetail={handleOpenDetail} // „Ç¢„É≥„É≠„ÉÉ„ÇØÊôÇ
              onSolveDirectly={handleSolveDirectly} // Èï∑Êäº„ÅóÂá¶ÁêÜ
            />
          ))}
        </div>
      </main>

      {/* Ë¨éËß£„Åç„É¢„Éº„ÉÄ„É´ */}
      <RiddleModal
        isOpen={isRiddleModalOpen}
        onClose={() => setIsRiddleModalOpen(false)}
        scheduleItem={currentRiddleItem?.item || {}}
        onSolveAndOpenDetail={handleSolveAndOpenDetail}
      />

      {/* Ë©≥Á¥∞‰∫àÂÆö„É¢„Éº„ÉÄ„É´ */}
      <DetailModal
        isOpen={isDetailModalOpen}
        onClose={() => setIsDetailModalOpen(false)}
        scheduleItem={currentRiddleItem?.item || {}}
      />
    </div>
  );
}
